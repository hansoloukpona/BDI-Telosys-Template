## --------------------------------------------------
##if ( $entity.isJoinEntity() )
##cancel("No repository class for join entity")
##end
## --------------------------------------------------
#checkId($entity)
#parse("include/init_var_entity.vm")
#parse("include/java_header.vm")
package ${target.javaPackageFromFolder(${SRC})};
##---------------------------------------------------------------------------------------

#set($basePackage = "fr.uga.miage.m1.reactorexample")

import com.htech.data.jpa.reactive.repository.ReactiveJpaRepository;
import ${basePackage}.data.models.${jpaEntityClass}Entity;
import jakarta.persistence.LockModeType;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.Lock;
import org.springframework.stereotype.Repository;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

#if ( $entity.hasCompositePrimaryKey() )
import ${basePackage}.data.models.${jpaEntityIdClass};
#else
#foreach( $import in $java.imports($entity.keyAttributes) )
import $import;
#end
#end

#foreach ($import in $java.imports($entity)) 
import $import;
#end


/**
 * Reactive JPA repository for entity "${jpaEntityClass}" <br> 
 * 
 * @author Telosys & kakaprout for m1miage2025
 *
 */


@Repository
public interface ${jpaEntityClass}Repository extends ReactiveJpaRepository<${jpaEntityClass}Entity, ${jpaEntityIdClass}> {

    @Override
    @Lock(LockModeType.READ)
    Flux<${jpaEntityClass}Entity> findAll();

    #if($entity.keyAttributes.size() > 0)
    Mono<Boolean> existsBy
    #foreach($attribute in $entity.keyAttributes)
        ${fn.capitalize($attribute.name)}#if($velocityCount < $entity.keyAttributes.size())And#end
    #end(
    #foreach($attribute in $entity.keyAttributes)
        ${attribute.type} ${fn.uncapitalize($attribute.name)}#if($velocityCount < $entity.keyAttributes.size()), #end
    #end);
	#end

    Mono<Page<${jpaEntityClass}Entity>> findAll(Pageable pageable);

	#if($entity.hasCompositePrimaryKey())
        #foreach($attribute in $entity.keyAttributes)
    Flux<${jpaEntityClass}Entity> findBy${fn.capitalize($attribute.name)}(${attribute.type} ${fn.uncapitalize($attribute.name)});
        #end
    #else
    Mono<${jpaEntityClass}Entity> findById(${entity.keyAttribute.type} id);
    #end
}

