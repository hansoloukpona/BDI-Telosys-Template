## --------------------------------------------------
##if ( $entity.isJoinEntity() )
##cancel("No JPA class for join entity")
##end
## --------------------------------------------------
#checkId($entity)
#parse("include/init_var_entity.vm")
#parse("include/java_header.vm")
##---------------------------------------------------------------------------------------
##                 JPA CONFIGURATION
##---------------------------------------------------------------------------------------
## Define the default collection type to be used (default is "java.util.List" )
## #set($env.collectionType = "java.util.Set")
## #set($env.collectionType = "java.util.Collection")
## ---------------------------
## Define if "targetEntity" must be generated in @ManyToMany or @OneToMany
## #set($jpa.genTargetEntity = true)
## ---------------------------
## Define default value (true or false) for "insertable" and "updatable" in "@JoinColumn"
## #set($jpa.joinColumnInsertable = true) 
## #set($jpa.joinColumnUpdatable  = true)
## ---------------------------
## Set default FETCH-TYPE for each cardinality ( "LAZY" or "EAGER" )
## #set($jpa.manyToOneFetchType  = "LAZY" )
## #set($jpa.oneToOneFetchType   = "LAZY" )
## #set($jpa.oneToManyFetchType  = "EAGER" )
## #set($jpa.manyToManyFetchType = "EAGER" )
##---------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder(${SRC})};
## IF ENTITY HAS A COMPOSITE PRIMARY KEY => GENERATE AN 'ID CLASS' FOR THIS PRIMARY KEY
#if ( $entity.hasCompositePrimaryKey() )
$generator.generate($target.entityName ,  "${jpaEntityIdClass}.java", $target.folder, "main-java/XxxJpaEntityId_java.vm" )
#end

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.experimental.SuperBuilder;

#foreach( $import in $java.imports($entity) )
import $import;
#end
## #foreach( $import in $jpa.imports($entity) )
## import $import;
## #end
import jakarta.persistence.*;

/**
 * JPA entity class for "${entity.name}"
 *
 * @author Telosys & kakaprout for m1miage2025
 *
 */


@Getter
@SuperBuilder
@RequiredArgsConstructor
@AllArgsConstructor
$jpa.entityAnnotations(0, $entity)
## IF ENTITY HAS A COMPOSITE PRIMARY KEY => DECLARE 'ID CLASS' FOR THIS PRIMARY KEY
#if ( $entity.hasCompositePrimaryKey() )  
@IdClass(${jpaEntityIdClass}.class)
#end
public class ${entity.name}Entity {

    //--- PRIMARY KEY 
#foreach( $attribute in $entity.keyAttributes )
$jpa.fieldAnnotations(4, $attribute)
    private $attribute.formattedType(10) $attribute.name #if($attribute.hasInitialValue())= ${attribute.initialValue} #end;

#end
    //--- OTHER DATA FIELDS 
#foreach( $attribute in $entity.nonKeyAttributes )
$jpa.fieldAnnotations(4, $attribute)
    private $attribute.formattedType(10) $attribute.name #if($attribute.hasInitialValue())= ${attribute.initialValue} #end;

#end

#if ( $entity.hasLinks() )
    //--- LINKS ( RELATIONSHIPS )
#foreach( $link in $entity.links )
        ## Ajouter des annotations pour chaque lien
$jpa.linkAnnotations(4, $link, $entity.attributes)

        ## Vérifier si le type nécessite un suffixe "Entity" et le compléter si nécessaire
#set($fieldType = "${link.formattedFieldType(10)}")
#set($excludedTypes = ["String", "Integer", "Long", "Double", "Boolean"])
#if(!$fieldType.endsWith("Entity") && !$excludedTypes.contains($fieldType))
#set($fieldType = "${fieldType}Entity")
#end
    private ${fieldType} $link.fieldName ;

#end
#end


}
