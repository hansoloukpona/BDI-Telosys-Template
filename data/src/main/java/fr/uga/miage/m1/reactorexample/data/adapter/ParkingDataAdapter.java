/*
 * Created on 2025-01-30 ( 11:28:42 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 3.3.0
 */



package data.src.main.java.fr.uga.miage.m1.reactorexample.data.adapter;

import fr.uga.miage.m1.reactorexample.data.mapper.ParkingEntityMapper;
import fr.uga.miage.m1.reactorexample.data.models.ParkingEntity;
import fr.uga.miage.m1.reactorexample.data.repositories.ParkingRepository;
import fr.uga.miage.m1.reactorexample.exception.data.ParkingEntityAlreadyExist;
import fr.uga.miage.m1.reactorexample.exception.data.ParkingEntityNotFoundException;
import fr.uga.miage.m1.reactorexample.models.Parking;
import fr.uga.miage.m1.reactorexample.models.ParkingToCreate;
import fr.uga.miage.m1.reactorexample.port.ParkingDataPort;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.math.BigDecimal;
import java.util.List;

/**
 * Data Mapper class for "Parking"
 *
 * @author Telosys & kakaprout for m1miage2025
 *
 */

@Component
@RequiredArgsConstructor
public class ParkingDataAdapter implements ParkingDataPort {

    private final ParkingRepository parkingRepository;
    private final ParkingEntityMapper parkingEntityMapper;

 	@Override
    public Mono<Parking> createParking(ParkingToCreate parkingToCreate) {
        return parkingRepository.existsByIdparkingAndNom(
                parkingToCreate.getIdparking(), parkingToCreate.getNom())
                .flatMap(exist -> !exist ? parkingRepository.save(
                        ParkingEntity.builder()
                                                            .idparking(parkingToCreate.getIdparking())
                                                            .nom(parkingToCreate.getNom())
                                                            .typeparking(parkingToCreate.getTypeparking())
                                                            .url(parkingToCreate.getUrl())
                                                            .nombredeplace(parkingToCreate.getNombredeplace())
                                                            .adresse(parkingToCreate.getAdresse())
                                                            .hauteurmax(parkingToCreate.getHauteurmax())
                                                            .numsiret(parkingToCreate.getNumsiret())
                                                            .xlong(parkingToCreate.getXlong())
                                                            .ylat(parkingToCreate.getYlat())
                                                            .tarif1h(parkingToCreate.getTarif1h())
                                                            .tarif2h(parkingToCreate.getTarif2h())
                                                            .tarif3h(parkingToCreate.getTarif3h())
                                                            .tarif4h(parkingToCreate.getTarif4h())
                                                            .tarif24h(parkingToCreate.getTarif24h())
                                                            .codeinsee(parkingToCreate.getCodeinsee())
                                                        .build()
                ) : Mono.error(new ParkingEntityAlreadyExist(String.format("Parking already exists with the same values", 
				parkingToCreate.getIdparking(), parkingToCreate.getNom())))
        ).map(parkingEntityMapper::toParking);
    }

	    @Override
    public Mono<Parking> findById(String id) {
        return parkingRepository.findById(id)
                .map(parkingEntityMapper::toParking)
                .switchIfEmpty(Mono.error(new ParkingEntityNotFoundException(String.format("Parking [%s] not found", id))));
    }
    
	public synchronized Flux<Parking> findAll() {
        return parkingRepository.findAll().map(parkingEntityMapper::toParking);
    }

}

