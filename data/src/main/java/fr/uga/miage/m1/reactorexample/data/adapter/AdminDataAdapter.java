/*
 * Created on 2025-01-30 ( 11:28:42 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 3.3.0
 */



package data.src.main.java.fr.uga.miage.m1.reactorexample.data.adapter;

import fr.uga.miage.m1.reactorexample.data.mapper.AdminEntityMapper;
import fr.uga.miage.m1.reactorexample.data.models.AdminEntity;
import fr.uga.miage.m1.reactorexample.data.repositories.AdminRepository;
import fr.uga.miage.m1.reactorexample.exception.data.AdminEntityAlreadyExist;
import fr.uga.miage.m1.reactorexample.exception.data.AdminEntityNotFoundException;
import fr.uga.miage.m1.reactorexample.models.Admin;
import fr.uga.miage.m1.reactorexample.models.AdminToCreate;
import fr.uga.miage.m1.reactorexample.port.AdminDataPort;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.math.BigDecimal;

/**
 * Data Mapper class for "Admin"
 *
 * @author Telosys & kakaprout for m1miage2025
 *
 */

@Component
@RequiredArgsConstructor
public class AdminDataAdapter implements AdminDataPort {

    private final AdminRepository adminRepository;
    private final AdminEntityMapper adminEntityMapper;

 	@Override
    public Mono<Admin> createAdmin(AdminToCreate adminToCreate) {
        return adminRepository.existsByEmailAndMotdepass(
                adminToCreate.getEmail(), adminToCreate.getMotdepass())
                .flatMap(exist -> !exist ? adminRepository.save(
                        AdminEntity.builder()
                                                            .email(adminToCreate.getEmail())
                                                            .motdepass(adminToCreate.getMotdepass())
                                                            .nom(adminToCreate.getNom())
                                                            .prenom(adminToCreate.getPrenom())
                                                            .telephone(adminToCreate.getTelephone())
                                                            .idparking(adminToCreate.getIdparking())
                                                        .build()
                ) : Mono.error(new AdminEntityAlreadyExist(String.format("Admin already exists with the same values", 
				adminToCreate.getEmail(), adminToCreate.getMotdepass())))
        ).map(adminEntityMapper::toAdmin);
    }

	    @Override
    public Mono<Admin> findById(String id) {
        return adminRepository.findById(id)
                .map(adminEntityMapper::toAdmin)
                .switchIfEmpty(Mono.error(new AdminEntityNotFoundException(String.format("Admin [%s] not found", id))));
    }
    
	public synchronized Flux<Admin> findAll() {
        return adminRepository.findAll().map(adminEntityMapper::toAdmin);
    }

}

